/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);

    And(a=Cinstruction, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=registerAin);

    Or(a=Ainstruction, b=ALUtoA, out=loadA);
    ARegister(in=registerAin, load=loadA, out=registerAout);
    Mux16(a=registerAout, b=inM, sel=instruction[12], out=registerAmuxMout);

    And(a=Cinstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);

    ALU(x=Dout, y=registerAmuxMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=isZeroOut, ng=isNegativeOut);

    Or16(a=false, b=registerAout, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=Cinstruction, b=instruction[3], out=writeM);

    Or(a=isZeroOut, b=isNegativeOut, out=zeroOrNegative);
    Not(in=zeroOrNegative, out=isPositive);

    And(a=isPositive, b=instruction[0], out=jumpGt);
    And(a=isZeroOut, b=instruction[1], out=jumpEq);
    And(a=isNegativeOut, b=instruction[2], out=jumpLt);
    Or(a=jumpEq, b=jumpLt, out=jumpLe);
    Or(a=jumpLe, b=jumpGt, out=jumpToA);

    And(a=Cinstruction, b=jumpToA, out=PCload);
    Not(in=PCload, out=PCinc);

    PC(in=registerAout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}