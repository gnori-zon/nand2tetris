/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // instruction= o xx a cccccc ddd jjj
    // |-------------------------------------|
    // |15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0| - idx
    // | o  x  x  a  c  c c c c c d d d j j j| - type
    // |-------------------------------------|
    // if o is 1 then is A-instruction else is C-instruction
    // a - is 2 operand for ALU if 0 then use M or A
    // c - is operation bits for ALU
    // ddd - is bit for target write [A-reg, D-reg, M], when M is RAM[A]
    // jjj - is bit for jump condition [JLT, JEQ, JGT]

    Not(in=instruction[15], out=isAinstruction);
    Not(in=isAinstruction, out=isCinstruction);

    And(a=isCinstruction, b=instruction[5], out=ALUtoA);
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=aRegisterIn);
    Or(a=isAinstruction, b=ALUtoA, out=aRegisterLoad);
    ARegister(in=aRegisterIn, load=aRegisterLoad, out=aRegisterOut);
    Mux16(a=aRegisterOut, b=inM, sel=instruction[12], out=aRegisterOutMuxInM);

    And(a=isCinstruction, b=instruction[4], out=dRegisterLoad);
    DRegister(in=ALUout, load=dRegisterLoad, out=dRegisterOut);

    ALU(x=dRegisterOut, y=aRegisterOutMuxInM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=isZeroALUout, ng=isNegativeALUout);

    Or16(a=false, b=aRegisterOut, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=isCinstruction, b=instruction[3], out=writeM);

    Or(a=isZeroALUout, b=isNegativeALUout, out=isZeroOrNegativeALUout);
    Not(in=isZeroOrNegativeALUout, out=isPositiveALUout);
    And(a=isNegativeALUout, b=instruction[2], out=needJLT);
    And(a=isZeroALUout, b=instruction[1], out=needJEQ;
    And(a=isPositiveALUout, b=instruction[0], out=needJGT);
    Or(a=needJLT, b=needJEQ, out=needJLE);
    Or(a=needJLE, b=needJGT, out=needAnyJumpToA);
    And(a=isCinstruction, b=needAnyJumpToA, out=PCload);
    Not(in=PCload, out=PCinc);

    PC(in=aRegisterOut, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}